@using static Frontend.Models.Orders.DTOs
@model IEnumerable<OrderDTO>
@using Frontend.Helpers;

@{
    ViewData["Title"] = "Đơn hàng vừa tạo";
}

<div class="container mt-4">
    <h3 class="mb-3">Đơn hàng của bạn</h3>

    @if (Model != null && Model.Any())
    {
        @foreach (var order in Model)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between">
                        <span><strong>Đơn hàng:</strong> @order.OrderName</span>
                        <span><strong>Trạng thái:</strong> @order.Status.ToVietnamese()</span>
                    </div>
                </div>
                <div class="card-body">
                    <p><strong>Store:</strong> @order.StoreName</p>
                    <p><strong>Ngày tạo:</strong> @order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                    <p><strong>Người nhận:</strong> @order.ShippingInfo.FullName</p>
                    <p><strong>Số điện thoại:</strong> @order.ShippingInfo.PhoneNumber</p>
                    <p><strong>Địa chỉ giao hàng:</strong> @order.ShippingInfo.Address</p>

                    <button class="payment-info btn btn-success"
                            data-bs-toggle="modal"
                            data-bs-target="#paymentModal"
                            data-order-id="@order.OrderId"
                            data-order-name="@order.OrderName"
                            data-store-id="@order.StoreId"
                            data-amount="@order.TotalAmount">
                        Thanh toán
                    </button>
                    <div class="table-responsive mt-3">
                        <table class="table table-bordered text-center">
                            <thead class="table-light">
                                <tr>
                                    <th>Ảnh</th>
                                    <th>Sản phẩm</th>
                                    <th>Số lượng</th>
                                    <th>Giá</th>
                                    <th>Thành tiền</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in order.OrderItems)
                                {
                                    <tr>
                                        <td><img src="@item.ProductImage" alt="img" class="order-img me-2" /></td>
                                        <td>@item.ProductName</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.Price.ToString("N0") đ</td>
                                        <td>@item.LineTotal.ToString("N0") đ</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end fw-bold">Tổng cộng</td>
                                    <td class="fw-bold text-primary">@order.TotalAmount.ToString("N0") đ</td>
                                </tr>
                            </tfoot>
                        </table>

                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-danger">Không có đơn hàng nào được tạo.</p>
    }
</div>


<!-- Modal thanh toán -->
@section Modals {

    <div class="modal" tabindex="-1" id="paymentModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="paymentForm">
                    <div class="modal-header">
                        <h5 class="modal-title">Thanh toán đơn hàng</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>

                    <div class="modal-body">
                        <input type="hidden" name="OrderId" id="OrderId" />
                        <input type="hidden" name="Amount" id="Amount" />
                        <input type="hidden" id="StoreId" name="StoreId" />
                        <div class="mb-3">
                            <label>Mã đơn hàng</label>
                            <input type="text" id="OrderIdDisplay" class="form-control" readonly />
                        </div>

                        <div class="mb-3">
                            <label>Phương thức thanh toán</label>
                            @* <select name="Method" id="PaymentMethod" class="form-select">
                                <option value="CreditCard"
                                        data-requires-card="true"
                                        data-fee-percent="1.10"
                                        data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                                    Credit Card
                                </option>
                                <option value="DebitCard"
                                        data-requires-card="true"
                                        data-fee-percent="0.80"
                                        data-desc="Thẻ ghi nợ nội địa/quốc tế qua Stripe. Phí 0.80%.">
                                    Debit Card
                                </option>
                            </select> *@
                            <div class="dropdown" id="PaymentMethodWrap">
                                <button class="btn btn-outline-secondary w-100 d-flex justify-content-between align-items-center"
                                        type="button" id="PaymentMethodBtn" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="PaymentMethodText">Credit Card</span>
                                    <span class="ms-2">▾</span>
                                </button>

                                <ul class="dropdown-menu w-100 shadow" aria-labelledby="PaymentMethodBtn">
                                    <li>
                                        <button type="button" class="dropdown-item"
                                                data-value="CreditCard"
                                                data-requires-card="true"
                                                data-fee-percent="1.10"
                                                data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                                            Credit Card
                                        </button>
                                    </li>
                                    <li>
                                        <button type="button" class="dropdown-item"
                                                data-value="DebitCard"
                                                data-requires-card="true"
                                                data-fee-percent="0.80"
                                                data-desc="Thẻ ghi nợ nội địa/quốc tế qua Stripe. Phí 0.80%.">
                                            Debit Card
                                        </button>
                                    </li>
                                </ul>
                            </div>

                            <!-- hidden input để submit lên server -->
                            <input type="hidden" name="Method" id="PaymentMethod" value="CreditCard"
                                   data-requires-card="true" data-fee-percent="1.10"
                                   data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                        </div>

                        <div class="mb-2">
                            <small id="MethodDesc" class="text-muted d-block"></small>
                            <div id="FeeBreakdown" class="small mt-1">
                                <div>Tạm tính: <span id="AmountBaseText"></span></div>
                                <div>Phí phương thức: <span id="FeeText"></span></div>
                                <div class="fw-bold">Tổng cần thanh toán: <span id="AmountFinalText"></span></div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Tổng tiền</label>
                            <input type="text" id="AmountDisplay" class="form-control" readonly />
                        </div>

                        <div class="mb-3">
                            <label>Tiền tệ</label>
                            <select name="Currency" class="form-select" disabled>
                                <option value="VND">VND</option>
                            </select>
                        </div>

                        <div class="mb-3" id="CardRow">
                            <label>Thông tin thẻ</label>
                            <div id="card-element" class="form-control"></div>
                            <div id="card-errors" class="text-danger mt-2"></div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        <button type="submit" class="btn btn-primary">Xác nhận thanh toán</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

}

@section Scripts {
    @* <script>

        var paymentModal = document.getElementById('paymentModal');
        paymentModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var orderId = button.getAttribute('data-order-id');
            var amount = button.getAttribute('data-amount');
            var orderName = button.getAttribute('data-order-name');

            document.getElementById('OrderId').value = orderId;
            document.getElementById('Amount').value = amount;

            document.getElementById('OrderIdDisplay').value = orderName;
            document.getElementById('AmountDisplay').value = parseFloat(amount).toLocaleString("vi-VN") + " đ";
        });

        // Submit form -> gọi API + Stripe confirm
        document.getElementById("paymentForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const orderId = formData.get("OrderId");
            const request = {
                orderId: orderId,
                buyerId: null,
                method: formData.get("Method"),
                amount: parseFloat(formData.get("Amount")),
                currency: formData.get("Currency")
            };

            try {
                const response = await fetch(`/payment/create-payment?order_id=${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(request)
                });

                if (!response.ok) {
                    const text = await response.text();
                    alert("❌ Lỗi backend: " + text);
                    return;
                }

                const result = await response.json();
                if (result.data?.clientSecret) {
                    // Dùng cardElement đã được mount trong Layout
                    const { paymentIntent, error } = await stripe.confirmCardPayment(result.data.clientSecret, {
                        payment_method: { card: cardElement }
                    });

                    if (error) {
                        alert("❌ Thanh toán thất bại: " + error.message);
                    } else if (paymentIntent.status === "succeeded") {
                        // Gửi confirm về backend
                        const confirmResponse = await fetch("/payment/confirm-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: request.orderId,
                                paymentIntentId: paymentIntent.id
                            })
                        });

                        if (confirmResponse.ok) {
                            alert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!");
                            window.location.href = '@Url.Action("GetOrderList", "Order")';
                        } else {
                            const confirmResult = await confirmResponse.json();
                            alert("⚠️ Thanh toán xong nhưng chưa confirm order: " + confirmResult.message);
                        }
                    }
                }
            } catch (err) {
                console.error("❌ Exception:", err);
                alert("❌ Exception: " + err.message);
            }
        });
    </script> *@

    <script>
        // Lưu base amount và trạng thái phương thức
        let amountBase = 0;
        let requiresCard = true;

        function formatVND(n){ return Number(n).toLocaleString("vi-VN") + " đ"; }

        // function recalcPaymentUI() {
        //     const sel = document.getElementById('PaymentMethod');
        //     const opt = sel.options[sel.selectedIndex];

        //     const desc = opt.getAttribute('data-desc') || '';
        //     const feePercent = parseFloat(opt.getAttribute('data-fee-percent') || '0'); ví dụ 1.10 (%)
        //     requiresCard = (opt.getAttribute('data-requires-card') === 'true');

        //     const fee = Math.round(amountBase * (feePercent/100));      phí theo %
        //     const total = amountBase + fee;

        //     Cập nhật UI
        //     document.getElementById('MethodDesc').innerText = desc;
        //     document.getElementById('AmountBaseText').innerText = formatVND(amountBase);
        //     document.getElementById('FeeText').innerText = feePercent ? `${formatVND(fee)} (${feePercent}%)` : formatVND(fee);
        //     document.getElementById('AmountFinalText').innerText = formatVND(total);

        //     Cập nhật hidden Amount gửi về backend
        //     document.getElementById('Amount').value = total;
        //     document.getElementById('AmountDisplay').value = formatVND(total);

        //     Ẩn/hiện khối nhập thẻ
        //     const cardRow = document.getElementById('card-element').closest('.mb-3');
        //     if (requiresCard) {
        //         cardRow.classList.remove('hidden');
        //     } else {
        //         cardRow.classList.add('hidden');
        //     }
        // }

        function recalcPaymentUI() {
            const hidden = document.getElementById('PaymentMethod');

            const desc = hidden.getAttribute('data-desc') || '';
            const feePercent = parseFloat(hidden.getAttribute('data-fee-percent') || '0');
            requiresCard = (hidden.getAttribute('data-requires-card') === 'true');

            const fee = Math.round(amountBase * (feePercent / 100));
            const total = amountBase + fee;

            // Cập nhật breakdown
            document.getElementById('MethodDesc').innerText = desc;
            document.getElementById('AmountBaseText').innerText = formatVND(amountBase);
            document.getElementById('FeeText').innerText = feePercent
                ? `${formatVND(fee)} (${feePercent}%)`
                : formatVND(fee);
            document.getElementById('AmountFinalText').innerText = formatVND(total);

            // Hidden fields
            document.getElementById('Amount').value = total;
            document.getElementById('AmountDisplay').value = formatVND(total);

            // Ẩn/hiện block thẻ
            const cardRow = document.getElementById('CardRow');
            if (requiresCard) cardRow.classList.remove('d-none');
                     
            else cardRow.classList.add('d-none');
        }

        document.getElementById('PaymentMethodWrap')?.addEventListener('click', (e) => {
            const item = e.target.closest('.dropdown-item');
            if (!item) return;

            const hidden = document.getElementById('PaymentMethod');
            hidden.value = item.dataset.value;
            hidden.setAttribute('data-requires-card', item.dataset.requiresCard);
            hidden.setAttribute('data-fee-percent', item.dataset.feePercent);
            hidden.setAttribute('data-desc', item.dataset.desc);

            // đổi text nút
            document.getElementById('PaymentMethodText').textContent = item.textContent.trim();

            // tính lại
            recalcPaymentUI();
        });

        // Khi mở modal: bind dữ liệu và tính lần đầu
        var paymentModal = document.getElementById('paymentModal');
        paymentModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var orderId = button.getAttribute('data-order-id');
            var storeId = button.getAttribute('data-store-id');
            var amount = button.getAttribute('data-amount');              // tạm tính từ order

            document.getElementById('OrderId').value = orderId;
            document.getElementById('StoreId').value = storeId;
            document.getElementById('OrderIdDisplay').value = button.getAttribute('data-order-name');

            amountBase = Math.round(parseFloat(amount) || 0);

            // tính lần đầu theo option mặc định
            recalcPaymentUI();
        });

        // Khi đổi phương thức → tính lại
        //document.getElementById('PaymentMethod').addEventListener('change', recalcPaymentUI);

        // Submit form: tách 2 luồng
        document.getElementById("paymentForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const orderId = formData.get("OrderId");
            const storeId = formData.get("StoreId");
            const method = formData.get("Method");
            const amount = parseFloat(formData.get("Amount"));
            const currency = formData.get("Currency");

            // Nếu KHÔNG cần thẻ (ví dụ COD/BankTransfer), có thể gọi API khác
            // if (!requiresCard) {
            //     try {
            //         const resp = await fetch("/payment/create-offline-payment", {
            //             method: "POST",
            //             headers: { "Content-Type": "application/json" },
            //             body: JSON.stringify({ orderId, method, amount, currency })
            //         });
            //         const data = await resp.json();
            //         if (!resp.ok) {
            //             alert("❌ Lỗi backend: " + (data?.message || "Unknown"));
            //             return;
            //         }
            //         alert("✅ Đã ghi nhận yêu cầu thanh toán offline.");
            //         window.location.href = '@Url.Action("GetOrderList", "Order")';
            //     } catch (err) {
            //         alert("❌ Exception: " + err.message);
            //     }
            //     return;
            // }

            // Luồng cần thẻ → Stripe (giữ nguyên logic cũ)
            const request = { orderId, buyerId: null, storeId, method, amount, currency };

            try {
                const response = await fetch(`/payment/create-payment?order_id=${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(request)
                });

                if (!response.ok) {
                    const text = await response.text();
                    showAlert("❌ Lỗi backend", "error");
                    //alert("❌ Lỗi backend: " + text);
                    return;
                }

                const result = await response.json();
                if (result.data?.clientSecret) {
                    const { paymentIntent, error } = await stripe.confirmCardPayment(result.data.clientSecret, {
                        payment_method: { card: cardElement }
                    });

                    if (error) {
                        showAlert("❌ Thanh toán thất bại", "error");
                        //alert("❌ Thanh toán thất bại: " + error.message);
                    } else if (paymentIntent.status === "succeeded") {
                        const confirmResponse = await fetch("/payment/confirm-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: orderId,
                                paymentIntentId: paymentIntent.id,
                                method: method,
                                paidAmount: amount
                            })
                        });

                        if (confirmResponse.ok) {
                            showAlert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!", "success");
                            //alert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!");
                            setTimeout(() => {
                                        window.location.href = '@Url.Action("GetOrderList", "Order")';
                                    }, 2000);
                            //window.location.href = '@Url.Action("GetOrderList", "Order")';
                        } else {
                            const confirmResult = await confirmResponse.json();
                            showAlert("⚠️ Thanh toán xong nhưng chưa confirm order: " + (confirmResult.message || ''), "warning");
                            //alert("⚠️ Thanh toán xong nhưng chưa confirm order: " + (confirmResult.message || ''));
                        }
                    }
                }
            } catch (err) {
                console.error("❌ Exception:", err);
                showAlert("❌ Exception: " + err.message, "error");
                //alert("❌ Exception: " + err.message);
            }
        });
    </script>


}
