@using static Frontend.Models.Orders.DTOs
@model IEnumerable<OrderDTO>
@using Frontend.Helpers;

@{
    ViewData["Title"] = "Đơn hàng vừa tạo";
}

<div class="container mt-4">
    <h3 class="mb-3">Đơn hàng của bạn</h3>

    @if (Model != null && Model.Any())
    {
        @foreach (var order in Model)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between">
                        <span><strong>Đơn hàng:</strong> @order.OrderName</span>
                        <span><strong>Trạng thái:</strong> @order.Status.ToVietnamese()</span>
                    </div>
                </div>
                <div class="card-body">
                    <p><strong>Store:</strong> @order.StoreName</p>
                    <p><strong>Ngày tạo:</strong> @order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>

                    <button class="payment-info btn btn-success"
                            data-bs-toggle="modal"
                            data-bs-target="#paymentModal"
                            data-order-id="@order.OrderId"
                            data-order-name="@order.OrderName"
                            data-amount="@order.TotalAmount">
                        Thanh toán
                    </button>
                    <div class="table-responsive mt-3">
                        <table class="table table-bordered text-center">
                            <thead class="table-light">
                                <tr>
                                    <th>Ảnh</th>
                                    <th>Sản phẩm</th>
                                    <th>Số lượng</th>
                                    <th>Giá</th>
                                    <th>Thành tiền</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in order.OrderItems)
                                {
                                    <tr>
                                        <td><img src="@item.ProductImage" alt="img" class="order-img me-2" /></td>
                                        <td>@item.ProductName</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.Price.ToString("N0") đ</td>
                                        <td>@item.LineTotal.ToString("N0") đ</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end fw-bold">Tổng cộng</td>
                                    <td class="fw-bold text-primary">@order.TotalAmount.ToString("N0") đ</td>
                                </tr>
                            </tfoot>
                        </table>

                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-danger">Không có đơn hàng nào được tạo.</p>
    }
</div>


<!-- Modal thanh toán -->
<div class="modal" tabindex="-1" id="paymentModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="paymentForm">
                <div class="modal-header">
                    <h5 class="modal-title">Thanh toán đơn hàng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" name="OrderId" id="OrderId" />
                    <input type="hidden" name="Amount" id="Amount" />

                    <div class="mb-3">
                        <label>Mã đơn hàng</label>
                        <input type="text" id="OrderIdDisplay" class="form-control" readonly />
                    </div>

                    <div class="mb-3">
                        <label>Phương thức thanh toán</label>
                        <select name="Method" class="form-select">
                            <option value="CreditCard">Credit Card</option>
                            <option value="DebitCard">Debit Card</option>
                            <option value="BankTransfer">Bank Transfer</option>
                            <option value="EWallet">E-Wallet</option>
                            <option value="QRCode">QR Code</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label>Tổng tiền</label>
                        <input type="text" id="AmountDisplay" class="form-control" readonly />
                    </div>

                    <div class="mb-3">
                        <label>Tiền tệ</label>
                        <select name="Currency" class="form-select">
                            <option value="VND">VND</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label>Thông tin thẻ</label>
                        <div id="card-element" class="form-control"></div>
                        <div id="card-errors" class="text-danger mt-2"></div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Xác nhận thanh toán</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>

        var paymentModal = document.getElementById('paymentModal');
        paymentModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var orderId = button.getAttribute('data-order-id');
            var amount = button.getAttribute('data-amount');
            var orderName = button.getAttribute('data-order-name');

            document.getElementById('OrderId').value = orderId;
            document.getElementById('Amount').value = amount;

            document.getElementById('OrderIdDisplay').value = orderName;
            document.getElementById('AmountDisplay').value = parseFloat(amount).toLocaleString("vi-VN") + " đ";
        });

        // Submit form -> gọi API + Stripe confirm
        document.getElementById("paymentForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const orderId = formData.get("OrderId");
            const request = {
                orderId: orderId,
                buyerId: null,
                method: formData.get("Method"),
                amount: parseFloat(formData.get("Amount")),
                currency: formData.get("Currency")
            };

            try {
                const response = await fetch(`/payment/create-payment?order_id=${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(request)
                });

                if (!response.ok) {
                    const text = await response.text();
                    alert("❌ Lỗi backend: " + text);
                    return;
                }

                const result = await response.json();
                if (result.data?.clientSecret) {
                    // Dùng cardElement đã được mount trong Layout
                    const { paymentIntent, error } = await stripe.confirmCardPayment(result.data.clientSecret, {
                        payment_method: { card: cardElement }
                    });

                    if (error) {
                        alert("❌ Thanh toán thất bại: " + error.message);
                    } else if (paymentIntent.status === "succeeded") {
                        // Gửi confirm về backend
                        const confirmResponse = await fetch("/payment/confirm-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId: request.orderId,
                                paymentIntentId: paymentIntent.id
                            })
                        });

                        if (confirmResponse.ok) {
                            alert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!");
                            window.location.href = '@Url.Action("GetOrderList", "Order")';
                        } else {
                            const confirmResult = await confirmResponse.json();
                            alert("⚠️ Thanh toán xong nhưng chưa confirm order: " + confirmResult.message);
                        }
                    }
                }
            } catch (err) {
                console.error("❌ Exception:", err);
                alert("❌ Exception: " + err.message);
            }
        });
    </script>
}
