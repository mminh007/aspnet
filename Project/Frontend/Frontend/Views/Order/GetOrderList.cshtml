@model List<Frontend.Models.Orders.DTOs.OrderDTO>
@using Frontend.Helpers
@{
    ViewData["Title"] = "Quản lý đơn hàng";
}

<div class="container mt-4">
    <h2 class="mb-4 text-danger">Quản lý đơn hàng</h2>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center">
            Bạn không có đơn hàng nào.
        </div>
    }
    else
    {
        @foreach (var group in Model.GroupBy(o => o.Status).OrderBy(g => g.Key))
        {
            <div class="mb-5">
                <h4 class="text-primary">Trạng thái: @group.Key.ToVietnamese() (@group.Count() đơn)</h4>

                <div class="table-responsive mt-2">
                    <table class="table table-bordered table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Mã đơn hàng</th>
                                <th>Ngày tạo</th>
                                <th>Tổng tiền</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in group)
                            {
                                <tr>
                                    <td>@order.OrderName</td>
                                    <td>@order.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                                    <td class="fw-bold text-danger">@order.TotalAmount.ToString("N0") đ</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary view-details"
                                                data-bs-toggle="modal"
                                                data-bs-target="#orderDetailModal"
                                                data-order-name="@order.OrderName" ,
                                                data-order-id="@order.OrderId"
                                                data-order-status="@order.Status.ToVietnamese()"
                                                data-order-date="@order.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")"
                                                data-order-total="@order.TotalAmount.ToString("N0") đ"
                                                data-order-items='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(order.OrderItems))'>
                                            Chi tiết
                                        </button>

                                        <button>
                                            <a class="text-decoration-none text-dark" asp-action="CancelOrder" asp-controller="Order"
                                                  asp-route-orderId="@order.OrderId"
                                               onclick="return confirm('Bạn có chắc muốn hủy đơn hàng này không?');"> Xóa Đơn</a>
                                        </button>

                                        @if (order.Status == "Pending")
                                        {
                                            <button class="btn btn-sm btn-success payment-info"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#paymentModal"
                                                    data-order-id="@order.OrderId"
                                                    data-order-name="@order.OrderName"
                                                    data-store-id="@order.StoreId"
                                                    data-amount="@order.TotalAmount">
                                                    
                                                Thanh toán

                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        }
    }
</div>

<!-- Modal -->


<!-- Model Payment-->
@section Modals {

    <div class="modal fade" id="orderDetailModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title">Chi tiết đơn hàng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Mã đơn:</strong> <span id="modalOrderName"></span></p>
                    <p><strong>Ngày tạo:</strong> <span id="modalOrderDate"></span></p>
                    <p><strong>Trạng thái:</strong> <span id="modalOrderStatus"></span></p>
                    <p><strong>Tổng tiền:</strong> <span id="modalOrderTotal"></span></p>

                    <h6 class="mt-3">Danh sách sản phẩm:</h6>
                    <ul id="modalOrderItems" class="list-unstyled"></ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal" tabindex="-1" id="paymentModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="paymentForm">
                    <div class="modal-header">
                        <h5 class="modal-title">Thanh toán đơn hàng</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>

                    <div class="modal-body">
                        <input type="hidden" name="OrderId" id="OrderId" />
                        <input type="hidden" name="Amount" id="Amount" />
                        <input type="hidden" id="StoreId" name="StoreId" />

                        <div class="mb-3">
                            <label>Mã đơn hàng</label>
                            <input type="text" id="OrderNameDisplay" class="form-control" readonly />
                        </div>

                        <div class="mb-3">
                            <label>Phương thức thanh toán</label>
                            @* <select name="Method" id="PaymentMethod" class="form-select">
                                <option value="CreditCard"
                                        data-requires-card="true"
                                        data-fee-percent="1.10"
                                        data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                                    Credit Card
                                </option>
                                <option value="DebitCard"
                                        data-requires-card="true"
                                        data-fee-percent="0.80"
                                        data-desc="Thẻ ghi nợ nội địa/quốc tế qua Stripe. Phí 0.80%.">
                                    Debit Card
                                </option>
                            </select> *@

                            <div class="dropdown" id="PaymentMethodWrap">
                                <button class="btn btn-outline-secondary w-100 d-flex justify-content-between align-items-center"
                                        type="button" id="PaymentMethodBtn" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span id="PaymentMethodText">Credit Card</span>
                                    <span class="ms-2">▾</span>
                                </button>

                                <ul class="dropdown-menu w-100 shadow" aria-labelledby="PaymentMethodBtn">
                                    <li>
                                        <button type="button" class="dropdown-item"
                                                data-value="CreditCard"
                                                data-requires-card="true"
                                                data-fee-percent="1.10"
                                                data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                                            Credit Card
                                        </button>
                                    </li>
                                    <li>
                                        <button type="button" class="dropdown-item"
                                                data-value="DebitCard"
                                                data-requires-card="true"
                                                data-fee-percent="0.80"
                                                data-desc="Thẻ ghi nợ nội địa/quốc tế qua Stripe. Phí 0.80%.">
                                            Debit Card
                                        </button>
                                    </li>
                                </ul>
                            </div>

                            <!-- hidden input để submit lên server -->
                            <input type="hidden" name="Method" id="PaymentMethod" value="CreditCard"
                                   data-requires-card="true" data-fee-percent="1.10"
                                   data-desc="Thanh toán bằng thẻ tín dụng qua cổng Stripe. Phí 1.10%.">
                        </div>
                        

                        <div class="mb-2">
                            <small id="MethodDesc" class="text-muted d-block"></small>
                            <div id="FeeBreakdown" class="small mt-1">
                                <div>Tạm tính: <span id="AmountBaseText"></span></div>
                                <div>Phí phương thức: <span id="FeeText"></span></div>
                                <div class="fw-bold">Tổng cần thanh toán: <span id="AmountFinalText"></span></div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Tổng tiền</label>
                            <input type="text" id="AmountDisplay" class="form-control" readonly />
                        </div>

                        <div class="mb-3">
                            <label>Tiền tệ</label>
                            <select name="Currency" class="form-select" disabled>
                                <option value="VND">VND</option>
                            </select>
                        </div>

                        <div class="mb-3" id="CardRow">
                            <label>Thông tin thẻ</label>
                            <div id="card-element" class="form-control"></div>
                            <div id="card-errors" class="text-danger mt-2"></div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        <button type="submit" class="btn btn-primary">Xác nhận thanh toán</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>

        document.addEventListener("DOMContentLoaded", () => {
            let currentOrderId = null;

            document.querySelectorAll(".view-details").forEach(btn => {
                btn.addEventListener("click", () => {
                    currentOrderId = btn.dataset.orderId;

                    document.getElementById("modalOrderName").textContent = btn.dataset.orderName;
                    document.getElementById("modalOrderDate").textContent = btn.dataset.orderDate;
                    document.getElementById("modalOrderStatus").textContent = btn.dataset.orderStatus;
                    document.getElementById("modalOrderTotal").textContent = btn.dataset.orderTotal;

                    const items = JSON.parse(btn.dataset.orderItems);
                    const itemsContainer = document.getElementById("modalOrderItems");
                    itemsContainer.innerHTML = "";
                    items.forEach(it => {
                        itemsContainer.innerHTML += `
                            <li class="mb-2 d-flex align-items-center">
                                <img src="${it.ProductImage}" alt="${it.ProductName}"
                                     style="width:40px; height:40px; object-fit:cover;" />
                                <span class="ms-2">${it.ProductName} (x${it.Quantity}) - ${Number(it.Price).toLocaleString()} đ</span>
                            </li>`;
                    });
                });
            });

            let amountBase = 0;
            let requiresCard = true;

            function formatVND(n){ return Number(n).toLocaleString("vi-VN") + " đ"; }

            function recalcPaymentUI() {
                  const hidden = document.getElementById('PaymentMethod');

                  const desc = hidden.getAttribute('data-desc') || '';
                  const feePercent = parseFloat(hidden.getAttribute('data-fee-percent') || '0');
                  requiresCard = (hidden.getAttribute('data-requires-card') === 'true');

                  const fee = Math.round(amountBase * (feePercent / 100));
                  const total = amountBase + fee;

                  // Cập nhật breakdown
                  document.getElementById('MethodDesc').innerText = desc;
                  document.getElementById('AmountBaseText').innerText = formatVND(amountBase);
                  document.getElementById('FeeText').innerText = feePercent
                      ? `${formatVND(fee)} (${feePercent}%)`
                      : formatVND(fee);
                  document.getElementById('AmountFinalText').innerText = formatVND(total);

                  // Hidden fields
                  document.getElementById('Amount').value = total;
                  document.getElementById('AmountDisplay').value = formatVND(total);

                  // Ẩn/hiện block thẻ
                  const cardRow = document.getElementById('CardRow');
                  if (requiresCard) cardRow.classList.remove('d-none');
                  else cardRow.classList.add('d-none');
            }


                    // BẮT SỰ KIỆN click trên dropdown custom
            document.getElementById('PaymentMethodWrap')?.addEventListener('click', (e) => {
              const item = e.target.closest('.dropdown-item');
              if (!item) return;

              const hidden = document.getElementById('PaymentMethod');
              hidden.value = item.dataset.value;
              hidden.setAttribute('data-requires-card', item.dataset.requiresCard);
              hidden.setAttribute('data-fee-percent', item.dataset.feePercent);
              hidden.setAttribute('data-desc', item.dataset.desc);

              // đổi text nút
              document.getElementById('PaymentMethodText').textContent = item.textContent.trim();

              // tính lại
              recalcPaymentUI();
            });

            var paymentModal = document.getElementById('paymentModal');
            paymentModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const orderId = button.getAttribute('data-order-id');
                const storeId = button.getAttribute('data-store-id');
                const orderName = button.getAttribute('data-order-name');
                const amount = button.getAttribute('data-amount');

                document.getElementById('OrderId').value = orderId;
                document.getElementById('StoreId').value = storeId;
                document.getElementById('OrderNameDisplay').value = orderName;
                document.getElementById('Amount').value = amount;

                amountBase = Math.round(parseFloat(amount) || 0);
                recalcPaymentUI();

            });

            //document.getElementById('PaymentMethod').addEventListener('change', recalcPaymentUI);

            // Submit form -> gọi API + Stripe confirm
            document.getElementById("paymentForm").addEventListener("submit", async function (e) {
                e.preventDefault();

                const formData = new FormData(this);
                const orderId = formData.get("OrderId");
                const storeId = formData.get("StoreId");
                const request = {
                    orderId: orderId,
                    buyerId: null,
                    storeId: storeId,
                    method: formData.get("Method"),
                    amount: parseFloat(formData.get("Amount")),
                    currency: formData.get("Currency")
                };

                try {
                    const response = await fetch(`/payment/create-payment?order_id=${orderId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(request)
                    });

                    if (!response.ok) {
                        const text = await response.text();
                        showAlert("❌ Lỗi backend: " + text, "error");
                        //alert("❌ Lỗi backend: " + text);
                        return;
                    }

                    const result = await response.json();
                    if (result.data?.clientSecret) {
                        // Dùng cardElement đã được mount trong Layout
                        const { paymentIntent, error } = await stripe.confirmCardPayment(result.data.clientSecret, {
                            payment_method: { card: cardElement }
                        });

                        if (error) {
                            showAlert("❌ Thanh toán thất bại: " + error.message, "error");
                            //alert("❌ Thanh toán thất bại: " + error.message);
                        } else if (paymentIntent.status === "succeeded") {
                            // Gửi confirm về backend
                            const confirmResponse = await fetch("/payment/confirm-payment", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    orderId: request.orderId,
                                    paymentIntentId: paymentIntent.id
                                })
                            });

                            if (confirmResponse.ok) {
                                showAlert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!", "success");
                                //alert("🎉 Thanh toán thành công và đã cập nhật đơn hàng!");
                                location.reload();
                            } else {
                                const confirmResult = await confirmResponse.json();
                                showAlert("⚠️ Thanh toán xong nhưng chưa confirm order: " + confirmResult.message, "warning");
                                //alert("⚠️ Thanh toán xong nhưng chưa confirm order: " + confirmResult.message);
                            }
                        }
                    }
                } catch (err) {
                    console.error("❌ Exception:", err);
                    showAlert("❌ Exception: " + err.message, "error");
                    //alert("❌ Exception: " + err.message);
                }
            });
        });

    </script>
}


