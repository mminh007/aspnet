@using static Frontend.Models.Products.DTOs;
@using Frontend.Models.Stores;
@using Frontend.Helpers;

@{
    var AuthHeader = AuthHelper.GetUserInfo(Context);
    var userId = AuthHeader.userId;
}

@model (StoreDto Store, List<CategoryDTO> Categories, List<ProductBuyerDTO> Products)

@{
    ViewData["Title"] = "Store Menu";
}

<div class="container mt-4">
    <!-- Store Info -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm border-0">
                <div class="card-body">
                    <h3 class="card-title">@Model.Store.StoreName</h3>
                    <p class="text-muted">@Model.Store.Description</p>
                    <ul class="list-unstyled mb-2">
                        <li><strong>Địa chỉ:</strong> @Model.Store.Address</li>
                        <li><strong>Điện thoại:</strong> @Model.Store.Phone</li>
                        <li>
                            <strong>Trạng thái:</strong>
                            @if (Model.Store.IsActive)
                            {
                                <span class="badge bg-success">Mở cửa</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Tạm ngưng</span>
                            }
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Menu -->
    <div class="row">
        <!-- Category Sidebar -->
        <div class="col-md-3">
            <div class="card shadow-sm border-0 mb-3 position-sticky" style="top: 20px;">
                <div class="card-body p-2">
                    <h5 class="card-title mb-3">Danh mục sản phẩm</h5>
                    <ul class="list-group" id="categoryList">
                        @foreach (var cat in Model.Categories)
                        {
                            <li class="list-group-item list-group-item-action category-link"
                                data-target="cat-@cat.CategoryId">
                                @cat.CategoryName
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <!-- Product List -->
        <div class="col-md-9">
            <div class="row">
                @foreach (var cat in Model.Categories)
                {
                    <div id="cat-@cat.CategoryId" class="mb-4 category-section">
                        <h4 class="border-bottom pb-2">@cat.CategoryName</h4>

                        @foreach (var product in Model.Products.Where(p => p.CategoryId == cat.CategoryId))
                        {
                            <div class="card mb-3 shadow-sm border-0">
                                <div class="row g-0 align-items-center">
                                    <div class="col-md-8">
                                        <div class="card-body py-2">
                                            <h5 class="card-title mb-1">@product.ProductName</h5>
                                            <p class="card-text text-muted small mb-1">@product.Description</p>
                                            <span class="badge @(product.IsActive ? "bg-success" : "bg-secondary") mb-2">
                                                @(product.IsActive ? "Đang bán" : "Ngừng bán")
                                            </span>
                                            <p class="card-text text-muted small mb-1">Số lượng: @product.Quantity</p>
                                            <p class="mb-0 fw-bold text-primary">@product.SalePrice.ToString("N0") đ</p>
                                        </div>
                                    </div>
                                    <div class="col-md-2 text-end pe-3">
                                        <div class="cart-actions" id="cart-actions-@product.ProductId">
                                            <button class="btn btn-primary btn-sm add-to-cart"
                                                    data-product-id="@product.ProductId"
                                                    data-store-id="@product.StoreId">
                                                +
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Floating Cart Button -->
<a href=""
   class="floating-cart-btn">
    <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor"
         class="bi bi-cart" viewBox="0 0 16 16">
        <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5
                 0 0 1 .485.379L2.89 3H14.5a.5.5
                 0 0 1 .491.592l-1.5 8A.5.5
                 0 0 1 13 12H4a.5.5
                 0 0 1-.491-.408L2.01
                 3.607 1.61 2H.5a.5.5
                 0 0 1-.5-.5zM3.102
                 4l1.313 7h8.17l1.313-7H3.102zM5
                 12a2 2 0 1 0 0 4 2 2 0 0
                 0 0-4zm7 0a2 2 0 1 0 0 4
                 2 2 0 0 0 0-4zm-7 1a1 1
                 0 1-1 .001-2.001A1 1 0 0 1
                 5 13zm7-1a1 1 0 1-1
                 .001-2.001A1 1 0 0 1 12 12z" />
    </svg>
    <span id="cartBadgeFloating"
          class="badge rounded-pill bg-danger position-absolute top-0 start-100 translate-middle">
        0
    </span>
</a>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // click (+) lần đầu
            document.querySelectorAll(".add-to-cart").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const productId = btn.dataset.productId;
                    const storeId = btn.dataset.storeId;
                    const userId = "@userId";

                    if (!userId || userId === "0") {
                        const currentUrl = window.location.pathname + window.location.search;
                        window.location.href = `/Authentication/Login?returnUrl=${encodeURIComponent(currentUrl)}`;
                        return;
                    }

                    const dto = { storeId, productId, quantity: 1 };

                    try {
                        const response = await fetch(`/Product/AddProductToCart?buyer=${userId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(dto)
                        });

                        if (response.ok) {
                            const result = await response.json();

                            // thay đổi UI thành (- qty +)
                            const container = document.getElementById(`cart-actions-${productId}`);
                            container.innerHTML = `
                                <div class="d-flex justify-content-end align-items-center">
                                    <button class="btn btn-sm btn-light border decrease"
                                            data-product-id="${productId}" data-store-id="${storeId}">-</button>
                                    <span class="mx-2 fw-bold quantity-value" id="qty-${productId}">1</span>
                                    <button class="btn btn-sm btn-light border increase"
                                            data-product-id="${productId}" data-store-id="${storeId}">+</button>
                                </div>`;

                            // cập nhật badge
                            const cartBadge = document.getElementById("cartBadge");
                            if (cartBadge) {
                                cartBadge.textContent = result.countItems;
                                cartBadge.classList.remove("bg-secondary");
                                cartBadge.classList.add("bg-danger");
                            }

                            bindQuantityButtons(productId, storeId, userId);
                        } else {
                            alert("❌ Lỗi thêm giỏ hàng");
                        }
                    } catch (err) {
                        console.error("Network error:", err);
                    }
                });
            });
                 

            // bind lại nút + -
            function bindQuantityButtons(productId, storeId, userId) {
                const container = document.getElementById(`cart-actions-${productId}`);
                const qtySpan = document.getElementById(`qty-${productId}`);

                container.querySelectorAll(".increase, .decrease").forEach(btn => {
                    btn.addEventListener("click", async () => {
                        let currentQty = parseInt(qtySpan.textContent);

                        if (btn.classList.contains("increase")) {
                            currentQty++;
                        } else if (btn.classList.contains("decrease") && currentQty > 1) {
                            currentQty--;
                        } else if (btn.classList.contains("decrease") && currentQty === 1) {
                            //nếu giảm về 0 thì quay lại nút (+)
                            container.innerHTML = `
                                <button class="btn btn-primary btn-sm add-to-cart"
                                        data-product-id="${productId}" data-store-id="${storeId}">+</button>`;
                            container.querySelector(".add-to-cart").addEventListener("click", () => {
                                document.querySelector(`#cart-actions-${productId} .add-to-cart`).click();
                            });
                            return;
                        }

                        //disable tránh spam
                        btn.disabled = true;
                        qtySpan.textContent = "...";

                        try {
                            const response = await fetch(`/Order/UpdateQuantity?userId=${userId}&productId=${productId}`, {
                                method: "PUT",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ productId, quantity: currentQty })
                            });

                            if (response.ok) {
                                const result = await response.json();
                                qtySpan.textContent = currentQty;

                                //cập nhật badge
                                const cartBadge = document.getElementById("cartBadge");
                                if (cartBadge) cartBadge.textContent = result.data.totalItems;
                            } else {
                                qtySpan.textContent = currentQty; rollback
                                alert("❌ Lỗi cập nhật số lượng");
                            }
                        } catch (err) {
                            console.error("Network error:", err);
                            qtySpan.textContent = currentQty;
                        } finally {
                            btn.disabled = false;
                        }
                    });
                });
            }
        });
    </script>
}
